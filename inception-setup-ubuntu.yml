#!/usr/bin/env ansible-playbook
---
- name: Inception setup for Ubuntu
  hosts: localhost
  connection: local
  gather_facts: false
  become: true
  tasks:

    - name: "Gather only facts returned by \
        architecture, distribution, os_family, user_dir, user_id"
      ansible.builtin.setup:
        gather_subset:
          - '!all'
          - '!min'
          - architecture
          - distribution
          - os_family
          - user_dir
          - user_id
      become: false
    
    - name: "Ensure that OS family is Debian and \
            that architecture and distribution are defined"
      ansible.builtin.assert:
        that:
          - ansible_architecture is defined
          - ansible_distribution is defined
          - ansible_os_family == "Debian"
        quiet: true

    - name: Set Ansible architecture
      ansible.builtin.set_fact:
        ansible_architecture: "\
          {{ 'amd64' if ansible_architecture == 'x86_64' \
          else 'arm64' if ansible_architecture == 'aarch64' \
          else ansible_architecture }}"

    - name: Update installed packages
      ansible.builtin.apt:
        name: "*"
        state: latest
        update_cache: true
        clean: true

    - name: Install unattended-upgrades and sudo packages
      ansible.builtin.apt:
        name:
          - unattended-upgrades
          - sudo
        state: latest

    - name: Edit /etc/apt/apt.conf.d/02periodic
      ansible.builtin.lineinfile:
        path: /etc/apt/apt.conf.d/02periodic
        line: "{{ item }}"
        create: true
      loop:
        - 'APT::Periodic::Enable "1";'
        - 'APT::Periodic::Update-Package-Lists "1";'
        - 'APT::Periodic::Download-Upgradeable-Packages "1";'
        - 'APT::Periodic::Unattended-Upgrade "1";'
        - 'APT::Periodic::AutocleanInterval "1";'
        - 'APT::Periodic::Verbose "1";'

    - name: Edit /etc/sudoers
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        regexp: "^Defaults\t{{ item.key }}"
        insertafter: '^Defaults'
        line: "Defaults\t{{ item.value }}"
      loop:
        - { key: 'passwd_tries', value: 'passwd_tries=3' }
        - { key: 'log_input', value: 'log_input' }
        - { key: 'log_output', value: 'log_output' }
        - { key: 'iolog_dir', value: 'iolog_dir="/var/log/sudo"' }
        - { key: 'requiretty', value: 'requiretty' }

    - name: Install make and git packages
      ansible.builtin.apt:
        name:
          - make
          - git
        state: latest

    - name: Set dotfiles git directory
      ansible.builtin.set_fact:
        dotfiles_git_directory: "{{ ansible_user_dir }}/.dotfiles"
      become: false

    - name: Download dotfiles
      ansible.builtin.git:
        repo: https://github.com/abdelbenamara/dotfiles.git
        dest: "{{ dotfiles_git_directory }}"
        single_branch: true
        update: false
      become: false

    - name: Make dotfiles
      community.general.make:
        chdir: "{{ dotfiles_git_directory }}"

    - name: Install ca-certificates and curl packages
      ansible.builtin.apt:
        name:
          - ca-certificates
          - curl
        state: latest

    - name: Create /etc/apt/keyrings
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker official GPG key
      ansible.builtin.get_url:
        url: "https://download.docker.com/linux/\
          {{ ansible_distribution | lower }}/gpg"
        dest: /etc/apt/keyrings/docker.asc
        mode: a+r

    - name: Edit /etc/apt/sources.list.d/docker.list
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/docker.list
        line: "deb [arch={{ ansible_architecture }} \
          signed-by=/etc/apt/keyrings/docker.asc] \
          https://download.docker.com/linux/{{ ansible_distribution | lower }} \
          {{ ansible_distribution_release }} stable"
        create: true

    - name: Update installed packages
      ansible.builtin.apt:
        name: "*"
        state: latest
        update_cache: true
        clean: true

    - name: "Install docker-ce, docker-ce-cli, containerd.io, \
        docker-buildx-plugin and docker-compose-plugin packages"
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest

    - name: Download Inception
      ansible.builtin.git:
        repo: https://github.com/abdelbenamara/Inception.git
        dest: "{{ ansible_user_dir }}/Inception"
        single_branch: yes
        update: false
      become: false
    
    - name: Create Inception/srcs/.env from Inception/srcs/template.env
      ansible.builtin.copy:
        src: "{{ ansible_user_dir }}/Inception/srcs/template.env"
        dest: "{{ ansible_user_dir }}/Inception/srcs/.env"

    - name: Edit Inception/srcs/.env
      ansible.builtin.lineinfile:
        path: "{{ ansible_user_dir }}/Inception/srcs/.env"
        regexp: '^LOGIN'
        line: "LOGIN={{ ansible_user_id }}"

    - name: Set common name (CN)
      ansible.builtin.set_fact:
        common_name: "www.{{ ansible_user_id }}.42.fr"
    
    - name: Create mariadb volume directory
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/Inception/srcs/requirements/tools"
        state: directory
      become: false
    
    - name: Set ssl certificate common path
      ansible.builtin.set_fact:
        common_path: "{{ ansible_user_dir }}/\
          Inception/srcs/requirements/tools/{{ common_name }}"

    - name: Generate an OpenSSL private key
      community.crypto.openssl_privatekey:
        path: "{{ common_path }}.key"
        size: 4096
        type: 'RSA'
      become: false

    - name: Create certificate signing request (CSR) for CA certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ common_path }}.key"
        country_name: 'FR'
        state_or_province_name: 'Ile-de-France'
        locality_name: 'Paris'
        organization_name: '42'
        organizational_unit_name: '42 School'
        common_name: "{{ common_name }}"
        use_common_name_for_san: false
      register: ca_csr

    - name: Create self-signed CA certificate from CSR
      community.crypto.x509_certificate:
        path: "{{ common_path }}.ca"
        csr_content: "{{ ca_csr.csr }}"
        privatekey_path: "{{ common_path }}.key"
        provider: selfsigned
      become: false
      
    - name: Create certificate signing request (CSR) for new certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ common_path }}.key"
        common_name: "{{ common_name }}"
        organization_name: '42'
        organizational_unit_name: 'Inception'
        subject_alt_name:
          - 'DNS:127.0.0.1'
          - 'DNS:localhost'
          - "DNS:{{ common_name }}"
          - "DNS:{{ ansible_user_id }}.42.fr"
      register: crt_csr

    - name: Generate an OpenSSL certificate signed with your own CA certificate
      community.crypto.x509_certificate:
        path: "{{ common_path }}.crt"
        csr_content: "{{ crt_csr.csr }}"
        ownca_path: "{{ common_path }}.ca"
        ownca_privatekey_path: "{{ common_path }}.key"
        provider: ownca
      become: false

    - name: Edit /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: '^127\.0\.0\.1'
        line: "127.0.0.1\tlocalhost {{ common_name }} \
          {{ ansible_user_id }}.42.fr"
    
    - name: Create secrets directory
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/Inception/secrets"
        state: directory
      become: false
    
    - name: Edit secrets
      ansible.builtin.lineinfile:
        path: "{{ ansible_user_dir }}/Inception/secrets/{{ item }}"
        regexp: "^.*"
        line: "{{ lookup('ansible.builtin.password', '/dev/null') }}"
        create: true
      loop:
        - "db_password.txt"
        - "db_root_password.txt"
      become: false

    - name: Create mariadb volume directory
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/data/mariadb"
        state: directory
      become: false

    - name: Create wordpress volume directory
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/data/wordpress"
        state: directory
      become: false

    - name: Make Inception
      community.general.make:
        chdir: "{{ ansible_user_dir }}/Inception"

    - name: Remove dependencies that are no longer required
      ansible.builtin.apt:
        autoremove: true

    - name: Remove useless packages from the cache
      ansible.builtin.apt:
        autoclean: true
